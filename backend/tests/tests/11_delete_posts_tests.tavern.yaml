test_name: Delete posts tests

stages:
  - name: 1 - Register test admin
    request:
      url: "{url}/auth/register/admin"
      method: POST
      json:
        name: "Admin"
        surname: "Admin"
        school: "1561"
        building: "11"
        login: "admin"
        password: "Test12345"
        avatar_img: "image"
    response:
      status_code: 201
      json:
        user_id: !anything
        name: "Admin"
        surname: "Admin"
        school: "1561"
        building: "11"
        login: "admin"
        avatar_img: "image"
    save:
      json:
        author_id: user_id
        author_login: login
        author_img: avatar_img

  - name: 2 - Register test client
    request:
      url: "{url}/auth/register/client"
      method: POST
      json:
        name: "User"
        surname: "User"
        school: "1561"
        building: "11"
        login: "user"
        password: "Test12345"
        avatar_img: "image"
    response:
      status_code: 201
      json:
        user_id: !anything
        name: "User"
        surname: "User"
        school: "1561"
        building: "11"
        login: "user"
        avatar_img: "image"
    save:
      json:
        author_client_id: user_id
        author_client_login: login
        author_client_img: avatar_img

  - name: 3 - Login admin
    request:
      url: "{url}/auth/login"
      method: POST
      json:
        login: "admin"
        password: "Test12345"
    response:
      status_code: 200
      json:
        access_token: !anything
      headers:
        Set-Cookie: !anything
    save:
      $ext:
        function: helpers:get_refresh_token
        extra_kwargs:
          cookie_name: "refresh_token"
      json:
        access_token: access_token

  - name: 4 - Login client
    request:
      url: "{url}/auth/login"
      method: POST
      json:
        login: "user"
        password: "Test12345"
    response:
      status_code: 200
      json:
        access_token: !anything
      headers:
        Set-Cookie: !anything
    save:
      $ext:
        function: helpers:get_refresh_token
        extra_kwargs:
          cookie_name: "refresh_token_user"
      json:
        access_token_client: access_token

  - name: 5 - Create news post as admin
    request:
      url: "{url}/create/post"
      method: POST
      headers:
        Authorization: "Bearer {access_token}"
      json:
        title: "Test News Post"
        type: "news"
        content: "Test content"
        short_content: "short content"
        start_date: 1744110904
        end_date: 1749381304
        post_img: "image poster"
        post_img_detail: "detail image"
    response:
      status_code: 201
      json:
        post_id: !anything
        title: "Test News Post"
        short_content: "short content"
        full_content: "Test content"
        start_date: 1744110904
        end_date: 1749381304
        img_url: "image poster"
        type: "news"
        status: "published"
        author:
          id: "{author_id}"
          login: "{author_login}"
          avatar_url: "{author_img}"
        created_at: !anything
    save:
      json:
        news_post_id: post_id

  - name: 6 - Create wallpaper post as client
    request:
      url: "{url}/create/post"
      method: POST
      headers:
        Authorization: "Bearer {access_token_client}"
      json:
        title: "Test Wallpaper Post"
        type: "wallpapers"
        content: "Test content"
        short_content: "short content"
        start_date: 1744110904
        end_date: 1749381304
        post_img: "image poster"
        post_img_detail: "detail image"
    response:
      status_code: 201
      json:
        post_id: !anything
        title: "Test Wallpaper Post"
        short_content: "short content"
        full_content: "Test content"
        start_date: 1744110904
        end_date: 1749381304
        img_url: "image poster"
        type: "wallpapers"
        status: "draft"
        author:
          id: "{author_client_id}"
          login: "{author_client_login}"
          avatar_url: "{author_client_img}"
        created_at: !anything
    save:
      json:
        wallpaper_post_id: post_id

  - name: 7 - Delete news post as admin
    request:
      url: "{url}/posts/{news_post_id}"
      method: DELETE
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 204

  - name: 8 - Verify news post is deleted
    request:
      url: "{url}/posts/{news_post_id}"
      method: GET
    response:
      status_code: 404

  - name: 9 - Get all posts
    request:
      url: "{url}/posts"
      method: GET
      params:
        type: "news"
    response:
      status_code: 200
      json: []

  - name: 10 - Delete wallpaper post as client
    request:
      url: "{url}/posts/{wallpaper_post_id}"
      method: DELETE
      headers:
        Authorization: "Bearer {access_token_client}"
    response:
      status_code: 204

  - name: 11 - Verify wallpaper post is deleted
    request:
      url: "{url}/posts/{wallpaper_post_id}"
      method: GET
    response:
      status_code: 404

  - name: 12 - Get all posts
    request:
      url: "{url}/posts"
      method: GET
      params:
        type: "wallpapers"
    response:
      status_code: 200
      json: [ ]

  - name: 13 - Delete non-existent post
    request:
      url: "{url}/posts/00000000-0000-0000-0000-000000000000"
      method: DELETE
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 404

  - name: 14 - Delete post without auth
    request:
      url: "{url}/posts/{news_post_id}"
      method: DELETE
    response:
      status_code: 401

  - name: 15 - Delete post with invalid token
    request:
      url: "{url}/posts/{news_post_id}"
      method: DELETE
      headers:
        Authorization: "Bearer invalid_token"
    response:
      status_code: 401

  - name: 16 - Delete news post as client (should fail)
    request:
      url: "{url}/posts/{news_post_id}"
      method: DELETE
      headers:
        Authorization: "Bearer {access_token_client}"
    response:
      status_code: 403

  - name: 17 - Delete post with invalid UUID format
    request:
      url: "{url}/posts/invalid-uuid"
      method: DELETE
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 404

  - name: 18 - Create wallpaper post as client
    request:
      url: "{url}/create/post"
      method: POST
      headers:
        Authorization: "Bearer {access_token_client}"
      json:
        title: "Test Wallpaper Post2"
        type: "wallpapers"
        content: "Test content2"
        short_content: "short content2"
        start_date: 1744110904
        end_date: 1749381304
        post_img: "image poster2"
        post_img_detail: "detail image2"
    response:
      status_code: 201
      json:
        post_id: !anything
        title: "Test Wallpaper Post2"
        short_content: "short content2"
        full_content: "Test content2"
        start_date: 1744110904
        end_date: 1749381304
        img_url: "image poster2"
        type: "wallpapers"
        status: "draft"
        author:
          id: "{author_client_id}"
          login: "{author_client_login}"
          avatar_url: "{author_client_img}"
        created_at: !anything
    save:
      json:
        wallpaper_post_id: post_id

  - name: 19 - Delete wallpaper post as another user
    request:
      url: "{url}/posts/{wallpaper_post_id}"
      method: DELETE
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 403

  - name: 20 - Delete wallpaper post as client
    request:
      url: "{url}/posts/{wallpaper_post_id}"
      method: DELETE
      headers:
        Authorization: "Bearer {access_token_client}"
    response:
      status_code: 204

  - name: 21 - Get all posts
    request:
      url: "{url}/posts"
      method: GET
      params:
        type: "wallpapers"
    response:
      status_code: 200
      json: [ ]
