test_name: Admin moderation posts tests

includes:
  - !include encoded_images.yaml

stages:
  - name: 1 - Register test admin
    request:
      url: "{url}/auth/register/admin"
      method: POST
      json:
        name: "Admin"
        surname: "Admin"
        school: "1561"
        building: "11"
        login: "admin"
        password: "Test12345"
        avatar_img: "image"
    response:
      status_code: 201
      json:
        user_id: !anything
        name: "Admin"
        surname: "Admin"
        school: "1561"
        building: "11"
        login: "admin"
      save:
        json:
          author_id: user_id
          author_login: login

  - name: 2 - Register test client
    request:
      url: "{url}/auth/register/client"
      method: POST
      json:
        name: "User"
        surname: "User"
        school: "1561"
        building: "11"
        login: "user"
        password: "Test12345"
    response:
      status_code: 201
      json:
        user_id: !anything
        name: "User"
        surname: "User"
        school: "1561"
        building: "11"
        login: "user"
      save:
        json:
          author_client_id: user_id
          author_client_login: login

  - name: 3 - Login admin
    request:
      url: "{url}/auth/login"
      method: POST
      json:
        login: "admin"
        password: "Test12345"
    response:
      status_code: 200
      json:
        access_token: !anything
      headers:
        Set-Cookie: !anything
      save:
        $ext:
          function: helpers:get_refresh_token
          extra_kwargs:
            cookie_name: "refresh_token_cookie"
        json:
          access_token: access_token

  - name: 4 - Login client
    request:
      url: "{url}/auth/login"
      method: POST
      json:
        login: "user"
        password: "Test12345"
    response:
      status_code: 200
      json:
        access_token: !anything
      headers:
        Set-Cookie: !anything
      save:
        $ext:
          function: helpers:get_refresh_token
          extra_kwargs:
            cookie_name: "refresh_token_cookie"
        json:
          access_token_client: access_token

  - name: 5 - Create wallpaper post as client
    request:
      url: "{url}/posts/create/post"
      method: POST
      headers:
        Authorization: "Bearer {access_token_client}"
      json:
        title: "Test Wallpaper Post"
        type: "wallpapers"
        content: "Test content"
        short_content: "short content"
        post_img: "{post_image}"
        post_img_detail: "{post_image}"
    response:
      status_code: 201
      json:
        post_id: !anything
        title: "Test Wallpaper Post"
        short_content: "short content"
        full_content: "Test content"
        image_url: !re_match "^https://.*$"
        type: "wallpapers"
        status: "draft"
        author:
          id: "{author_client_id}"
          login: "{author_client_login}"
      save:
        json:
          wallpaper_post_id: post_id

  - name: 6 - Send post to moderation as client
    request:
      url: "{url}/user/{wallpaper_post_id}/send/to/moderation"
      method: POST
      headers:
        Authorization: "Bearer {access_token_client}"
    response:
      status_code: 204

  - name: 7 - Try to send non-existent post to moderation
    request:
      url: "{url}/user/00000000-0000-0000-0000-000000000000/send/to/moderation"
      method: POST
      headers:
        Authorization: "Bearer {access_token_client}"
    response:
      status_code: 404

  - name: 8 - Try to send post to moderation without auth
    request:
      url: "{url}/user/{wallpaper_post_id}/send/to/moderation"
      method: POST
    response:
      status_code: 401

  - name: 9 - Try to send post to moderation with invalid token
    request:
      url: "{url}/user/{wallpaper_post_id}/send/to/moderation"
      method: POST
      headers:
        Authorization: "Bearer invalid_token"
    response:
      status_code: 401

  - name: 10.0 промежуточный тест
    request:
      url: "{url}/auth/refresh"
      method: POST
      headers:
        X-CSRF-TOKEN: "{csrf_token}"
      cookies:
        - refresh_token_cookie: "test"
    response:
      status_code: 401
      save:
        $ext:
          function: helpers:create_expired_refresh_token

  - name: 10 - Try to send post to moderation with expired token
    request:
      url: "{url}/user/{wallpaper_post_id}/send/to/moderation"
      method: POST
      headers:
        Authorization: "Bearer {refresh_token2}"
    response:
      status_code: 401

  - name: 11 - Try to send post to moderation with invalid post ID format
    request:
      url: "{url}/user/invalid_post_id/send/to/moderation"
      method: POST
      headers:
        Authorization: "Bearer {access_token_client}"
    response:
      status_code: 400

  - name: 12 - Try to send already moderated post
    request:
      url: "{url}/user/{wallpaper_post_id}/send/to/moderation"
      method: POST
      headers:
        Authorization: "Bearer {access_token_client}"
    response:
      status_code: 204

  - name: 13 - Create another post for moderation
    request:
      url: "{url}/posts/create/post"
      method: POST
      headers:
        Authorization: "Bearer {access_token_client}"
      json:
        title: "Test Wallpaper Post2"
        type: "wallpapers"
        content: "Test content2"
        short_content: "short content2"
        post_img: "{post_image}"
        post_img_detail: "{post_image}"
    response:
      status_code: 201
      json:
        post_id: !anything
        title: "Test Wallpaper Post2"
        short_content: "short content2"
        full_content: "Test content2"
        image_url: !re_match "^https://.*$"
        type: "wallpapers"
        status: "draft"
        author:
          id: "{author_client_id}"
          login: "{author_client_login}"
      save:
        json:
          wallpaper_post_id2: post_id

  - name: 14 - Send second post to moderation
    request:
      url: "{url}/user/{wallpaper_post_id2}/send/to/moderation"
      method: POST
      headers:
        Authorization: "Bearer {access_token_client}"
    response:
      status_code: 204

  - name: 15 - Get moderation posts as admin
    request:
      url: "{url}/admin/moderation"
      method: GET
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      json:
        wall_newspapers:
          - !anything
          - !anything

  - name: 16 - Get moderation posts with pagination
    request:
      url: "{url}/admin/moderation"
      method: GET
      headers:
        Authorization: "Bearer {access_token}"
      params:
        offset: 1
        limit: 5
    response:
      status_code: 200
      json:
        wall_newspapers:
          - !anything

  - name: 17 - Get moderation posts as client (should fail)
    request:
      url: "{url}/admin/moderation"
      method: GET
      headers:
        Authorization: "Bearer {access_token_client}"
    response:
      status_code: 403

  - name: 18 - Get moderation posts without auth
    request:
      url: "{url}/admin/moderation"
      method: GET
    response:
      status_code: 401

  - name: 19 - Get moderation posts with invalid token
    request:
      url: "{url}/admin/moderation"
      method: GET
      headers:
        Authorization: "Bearer invalid_token"
    response:
      status_code: 401

#  - name: 20 - Get moderation posts with invalid pagination
#    request:
#      url: "{url}/admin/moderation"
#      method: GET
#      headers:
#        Authorization: "Bearer {access_token}"
#      params:
#        offset: -1
#        limit: 0
#    response:
#      status_code: 400
#
#  - name: 21 - Get moderation posts with invalid pagination
#    request:
#      url: "{url}/admin/moderation"
#      method: GET
#      headers:
#        Authorization: "Bearer {access_token}"
#      params:
#        offset: 0
#        limit: -1
#    response:
#      status_code: 400

  - name: 22 - Create another draft post
    request:
      url: "{url}/posts/create/post"
      method: POST
      headers:
        Authorization: "Bearer {access_token_client}"
      json:
        title: "Test Wallpaper Post 3"
        type: "wallpapers"
        content: "Test content"
        short_content: "short content"
        post_img: "{post_image}"
        post_img_detail: "{post_image}"
    response:
      status_code: 201
      json:
        post_id: !anything
        title: "Test Wallpaper Post 3"
        short_content: "short content"
        full_content: "Test content"
        image_url: !re_match "^https://.*$"
        type: "wallpapers"
        status: "draft"
        author:
          id: "{author_client_id}"
          login: "{author_client_login}"
      save:
        json:
          wallpaper_post_id3: post_id

  - name: 23 - Send second post to moderation
    request:
      url: "{url}/user/{wallpaper_post_id3}/send/to/moderation"
      method: POST
      headers:
        Authorization: "Bearer {access_token_client}"
    response:
      status_code: 204

  - name: 24 - Get moderation posts
    request:
      url: "{url}/admin/moderation"
      method: GET
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      json:
        wall_newspapers:
          - !anything
          - !anything
          - !anything

  - name: 25 - Get moderation posts
    request:
      url: "{url}/admin/moderation"
      method: GET
      headers:
        Authorization: "Bearer {access_token}"
      params:
        offset: 1
    response:
      status_code: 200
      json:
        wall_newspapers:
          - !anything
          - !anything

  - name: 26 - Get moderation posts
    request:
      url: "{url}/admin/moderation"
      method: GET
      headers:
        Authorization: "Bearer {access_token}"
      params:
        limit: 1
    response:
      status_code: 200
      json:
        wall_newspapers:
          - !anything

  - name: 27 - Get moderation posts
    request:
      url: "{url}/admin/moderation"
      method: GET
      headers:
        Authorization: "Bearer {access_token}"
      params:
        limit: 1
        offset: 2
    response:
      status_code: 200
      json:
        wall_newspapers:
          - !anything
