openapi: 3.0.0
info:
  title: School News Feed API
  version: 1.0.0
  description: API for managing school information.
servers:
  - url: https://edufeed.ru
    description: Production server
  - url: http://127.0.0.1:8080
    description: Testing server

tags:
  - name: Authentication
    description: Endpoints for user authentication and authorization.
  - name: User
    description: Endpoints related to user profiles and personal actions.
  - name: Posts
    description: Endpoints for managing posts.
  - name: Admin
    description: Endpoints for administrative actions, including moderation and content management.
  - name: General
    description: Endpoints for admin and client

paths:
  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login to the system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successfully logged in
          headers:
            Set-Cookie:
              schema:
                type: string
                example: refreshToken=abc123; HttpOnly; Path=/; Secure; SameSite=Strict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized (invalid credentials)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh access token
      description: |
        Refresh the access token using the refresh token stored in an HTTP-only cookie.
        The refresh token is automatically sent by the browser if the cookie is valid.
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Unauthorized (invalid or expired refresh token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/register/client:
    post:
      tags:
        - Authentication
      summary: Register a new client
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientRegistration'
      responses:
        '201':
          description: Client registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/register/admin:
    post:
      tags:
        - Authentication
      summary: Register a new admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminRegistration'
      responses:
        '201':
          description: Admin registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /user/HomePage:
    get:
      tags:
        - User
      summary: Get user's posts (admin too)
      security:
        - BearerAuth: [ ]
      responses:
        '200':
          description: Posts return successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostsResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /user/profile:
    get:
      tags:
        - User
      summary: Get user profile
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    patch:
      tags:
        - User
      summary: Update user profile
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfileUpdate'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /user/{postId}/send/to/moderation:
    post:
      tags:
        - User
      summary: Send posts to moderation
      security:
        - BearerAuth: [ ]
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Send post
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /user/my-likes:
    get:
      tags:
        - User
      summary: Get user's liked posts
      security:
        - BearerAuth: [ ]
      responses:
        '200':
          description: User's liked posts
          content:
            application/json:
              schema:
                properties:
                  likes:
                    type: array
                    items:
                      $ref: '#/components/schemas/PostResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /posts:
    get:
      tags:
        - Posts
      summary: Get posts
      security:
        - BearerAuth: []
      parameters:
        - name: type
          in: query
          schema:
            type: string
            enum: [news, team_search, wallpapers]
        - name: limit
          in: query
          schema:
            type: integer
        - name: offset
          in: query
          schema:
            type: integer
        - name: start_date
          in: query
          schema:
            type: integer
        - name: end_date
          in: query
          schema:
            type: integer
        - name: tags
          in: query
          schema:
            type: array
      responses:
        '200':
          description: Posts retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostsResponse'
        '400':
          description: Invalid type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /posts/create/post:
    post:
      tags:
        - Posts
      summary: Create a news as admin
      security:
        - BearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminPostCreation'
      responses:
        '201':
          description: Post created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /posts/create/wallpapers:
    post:
      tags:
        - Posts
      summary: Create a new wallpapers
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WallNewspapersCreation'
      responses:
        '201':
          description: Post created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WallNewspapersCreation'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  
  /posts/{postId}:
    get:
      tags:
        - Posts
      summary: Get a detailed posts
      security:
        - BearerAuth: [ ]
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Post updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
        - Posts
      summary: Update a post or wall newspaper
      security:
        - BearerAuth: []
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostUpdate'
      responses:
        '200':
          description: Post updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Posts
      summary: Delete a post
      security:
        - BearerAuth: []
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Post deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /posts/{postId}/like:
    post:
      tags:
        - Posts
      summary: Like a post
      security:
        - BearerAuth: []
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Post liked successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /posts/{postId}/unlike:
    post:
      tags:
        - Posts
      summary: Unlike a post
      security:
        - BearerAuth: [ ]
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Post unliked successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /posts/{postId}/join:
    post:
      tags:
        - Posts
      summary: Join to event
      security:
        - BearerAuth: [ ]
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Join was successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /admin/moderation:
    get:
      tags:
        - Admin
      summary: Get wall newspapers for moderation
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Wall newspapers retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WallNewspapersResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: the user does not have access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /admin/moderation/{postId}/apply:
    post:
      tags:
        - Admin
      summary: Apply posts from user
      security:
        - BearerAuth: [ ]
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Apply post
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: the user does not have access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /admin/moderation/{postId}/reject:
    post:
      tags:
        - Admin
      summary: Reject posts from user
      security:
        - BearerAuth: [ ]
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
                  example: "Post have banwords"
      responses:
        '200':
          description: Reject post
          content:
            application/json:
              schema:
                type: object
                properties:
                  reason:
                    type: string
                    example: "Post have banwords"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: the user does not have access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /subscribe:
    post:
      tags:
        - General
      summary: Subscribe on posts or authors
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tags:
                  type: array
                  example: ["Новости"]
                author:
                  type: array
                  example: ["1561", "arttyu"]
      responses:
        '200':
          description: subscription was successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "subscription was successful"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Tags or author not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /admin/statistics:
    get:
      tags:
        - Admin
      summary: Get platform statistics
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Statistics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatisticsResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: the user does not have
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /admin/statistics/{post_id}:
    get:
      tags:
        - Admin
      summary: Get platform statistics for post_id
      security:
        - BearerAuth: [ ]
      parameters:
        - name: post_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Statistics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatisticDetailResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: the user does not have
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    LoginRequest:
      type: object
      required:
        - login
        - password
      properties:
        login:
          type: string
        password:
          type: string

    LoginResponse:
      type: object
      properties:
        access_token:
          type: string

    ClientRegistration:
      type: object
      required:
        - name
        - surname
        - school
        - building
        - login
        - password
      properties:
        name:
          type: string
        surname:
          type: string
        school:
          type: string
        building:
          type: string
        login:
          type: string
        password:
          type: string
          minLength: 8
        avatar_url:
          type: string
          example: "data:image/png;base64..."

    AdminRegistration:
      type: object
      required:
        - name
        - surname
        - school
        - building
        - login
        - password
      properties:
        name:
          type: string
        surname:
          type: string
        school:
          type: string
        building:
          type: string
        login:
          type: string
        password:
          type: string
          minLength: 8
        avatar_url:
          type: string
          example: "data:image/png;base64..."

    RegisterResponse:
      type: object
      properties:
        user_id:
          type: string
        name:
          type: string
        surname:
          type: string
        school:
          type: string
        building:
          type: string
        login:
          type: string
        avatar_url:
          type: string
          example: "http://..."

    ProfileResponse:
      type: object
      properties:
        user_id:
          type: string
        name:
          type: string
        surname:
          type: string
        school:
          type: string
        building:
          type: string
        login:
          type: string
        avatar_url:
          type: string

    ProfileUpdate:
      type: object
      properties:
        name:
          type: string
        surname:
          type: string
        building:
          type: string
        avatar_url:
          type: string
          
    Post:
      type: object
      properties:
        post_id:
          type: string
        type:
          type: string
          enum: [news, team_search, wallpapers]
        content:
          type: string
        short_content:
          type: string
        created_at:
          type: integer
        start_date:
          type: integer
        end_date:
          type: integer  
        author:
          $ref: '#/components/schemas/Author'
        likes:
          type: integer

    Author:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        surname:
          type: string
        avatar_url:
          type: string

    PostsResponse:
      type: object
      properties:
        posts:
          type: array
          items:
            $ref: '#/components/schemas/Post'

    PostCreation:
      type: object
      required:
        - type
        - title
        - content
        - short_content
        - end_date
        - post_img
      properties:
        title:
          type: string
        type:
          type: string
          enum: [news, team_search, wallpapers]
        content:
          type: string
        short_content:
          type: string
        start_date:
          type: integer
        end_date:
          type: integer
        post_img:
          type: string
        post_img_detail:
          type: string

    PostResponse:
      type: object
      properties:
        post_id:
          type: string
        title:
          type: string
        type:
          type: string
          example: news
        content:
          type: string
        short_content:
          type: string
        start_date:
          type: integer
        end_date:
          type: integer
        post_img:
          type: string
        post_img_detail:
          type: string

    WallNewspapersCreation:
      type: object
      required:
        - type
        - title
        - content
        - short_content
        - post_img_detail
      properties:
        title:
          type: string
        type:
          type: string
          example: wallpapers
        content:
          type: string
        short_content:
          type: string
        post_img:
          type: string
        post_img_detail:
          type: string

    WallNewspapersResponse:
      type: object
      properties:
        wall_newspapers:
          type: array
          items:
            $ref: '#/components/schemas/WallNewspaper'

    WallNewspaper:
      type: object
      properties:
        post_id:
          type: string
        title:
          type: string
        type:
          type: string
          example: wallpapers
        content:
          type: string
        short_content:
          type: string
        post_img:
          type: string
        post_img_detail:
          type: string
        status:
          type: string
          enum: [pending, approved, rejected]

    AdminPostCreation:
      type: object
      required:
        - type
        - title
        - content
        - short_content
        - end_date
        - post_img
      properties:
        title:
          type: string
        type:
          type: string
          enum: [news, wall_newspaper]
        content:
          type: string
        short_content:
          type: string
        start_date:
          type: integer
        end_date:
          type: integer
        post_img:
          type: string
        post_img_detail:
          type: string

    PostUpdate:
      type: object
      properties:
        title:
          type: string
        content:
          type: string
        short_content:
          type: string
        start_date:
          type: integer
        end_date:
          type: integer
        image_url:
          type: string
        tags:
          type: array

    NotificationsResponse:
      type: object
      properties:
        notifications:
          type: array
          items:
            $ref: '#/components/schemas/Notification'

    Notification:
      type: object
      properties:
        id:
          type: string
        message:
          type: string
        created_at:
          type: string
          format: date-time

    LikeResponse:
      type: object
      properties:
        message:
          type: string

    StatisticsResponse:
      type: object
      properties:
        total_posts:
          type: integer
        posts_by_this_author:
          type: integer
        most_three_active_user:
          type: array
          items:
            properties:
              id:
                type: string
              login:
                type: string
              post_count:
                type: integer
        avg_conversion:
          type: number

    StatisticDetailResponse:
      type: object
      properties:
        likes:
          type: number
        views:
          type: number
        joined:
          type: number
        conversion:
          type: number

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
        message:
          type: string